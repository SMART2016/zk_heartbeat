// Code generated by MockGen. DO NOT EDIT.
// Source: /home/ankita/go/src/github.com/ContinuumLLC/zk_heartbeat/heartbeat/zk_heart_beat.go

// Package mocks is a generated GoMock package.
package mocks

import (
	heartbeat "github.com/ContinuumLLC/zk_heartbeat/heartbeat"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// RegisterServiceHeartBeat mocks base method
func (m *MockController) RegisterServiceHeartBeat(arg0, arg1 string) ([]string, []string, error) {
	ret := m.ctrl.Call(m, "RegisterServiceHeartBeat", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterServiceHeartBeat indicates an expected call of RegisterServiceHeartBeat
func (mr *MockControllerMockRecorder) RegisterServiceHeartBeat(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServiceHeartBeat", reflect.TypeOf((*MockController)(nil).RegisterServiceHeartBeat), arg0, arg1)
}

// SetHeartbeatHandler mocks base method
func (m *MockController) SetHeartbeatHandler(arg0 heartbeat.HeartbeatChangeHandler) {
	m.ctrl.Call(m, "SetHeartbeatHandler", arg0)
}

// SetHeartbeatHandler indicates an expected call of SetHeartbeatHandler
func (mr *MockControllerMockRecorder) SetHeartbeatHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeartbeatHandler", reflect.TypeOf((*MockController)(nil).SetHeartbeatHandler), arg0)
}

// SetNoderegisterHandler mocks base method
func (m *MockController) SetNoderegisterHandler(arg0 heartbeat.NodeRegisterHandler) {
	m.ctrl.Call(m, "SetNoderegisterHandler", arg0)
}

// SetNoderegisterHandler indicates an expected call of SetNoderegisterHandler
func (mr *MockControllerMockRecorder) SetNoderegisterHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoderegisterHandler", reflect.TypeOf((*MockController)(nil).SetNoderegisterHandler), arg0)
}

// UpdateActualregisteredNodes mocks base method
func (m *MockController) UpdateActualregisteredNodes(newTotalregisterednodes []string) {
	m.ctrl.Call(m, "UpdateActualregisteredNodes", newTotalregisterednodes)
}

// UpdateActualregisteredNodes indicates an expected call of UpdateActualregisteredNodes
func (mr *MockControllerMockRecorder) UpdateActualregisteredNodes(newTotalregisterednodes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActualregisteredNodes", reflect.TypeOf((*MockController)(nil).UpdateActualregisteredNodes), newTotalregisterednodes)
}

// UpdateLiveNodes mocks base method
func (m *MockController) UpdateLiveNodes(newLibeNodes []string) {
	m.ctrl.Call(m, "UpdateLiveNodes", newLibeNodes)
}

// UpdateLiveNodes indicates an expected call of UpdateLiveNodes
func (mr *MockControllerMockRecorder) UpdateLiveNodes(newLibeNodes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLiveNodes", reflect.TypeOf((*MockController)(nil).UpdateLiveNodes), newLibeNodes)
}

// GetActualregisteredNodes mocks base method
func (m *MockController) GetActualregisteredNodes() []string {
	ret := m.ctrl.Call(m, "GetActualregisteredNodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetActualregisteredNodes indicates an expected call of GetActualregisteredNodes
func (mr *MockControllerMockRecorder) GetActualregisteredNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualregisteredNodes", reflect.TypeOf((*MockController)(nil).GetActualregisteredNodes))
}

// GetLiveNodes mocks base method
func (m *MockController) GetLiveNodes() []string {
	ret := m.ctrl.Call(m, "GetLiveNodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetLiveNodes indicates an expected call of GetLiveNodes
func (mr *MockControllerMockRecorder) GetLiveNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveNodes", reflect.TypeOf((*MockController)(nil).GetLiveNodes))
}
